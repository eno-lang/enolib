# Obtaining and throwing an error with a custom message in the context of a field

-- input
field: value
-- input

-- javascript
throw parse(input).field('field').error('my message')
-- javascript

-- php
throw Enolib\Parser::parse($input)->field('field')->error('my message');
-- php

-- python
raise enolib.parse(input).field('field').error('my message')
-- python

-- ruby
raise Enolib.parse(input).field('field').error('my message')
-- ruby

## ValidationError

-- text
my message
-- text

-- snippet
   Line | Content
 >    1 | field: value
-- snippet

selection: [0,0] => [0,12]

# Obtaining and throwing an error with a custom generated message in the context of a field

-- input
field: value
-- input

-- javascript
throw parse(input).field('field').error(field => `my generated message for field '${field.stringKey()}'`)
-- javascript

-- php
throw Enolib\Parser::parse($input)->field('field')->error(function($field) { return "my generated message for field '{$field->stringKey()}'"; });
-- php

-- python
raise enolib.parse(input).field('field').error(lambda field: f"my generated message for field '{field.string_key()}'")
-- python

-- ruby
raise(Enolib.parse(input).field('field').error { |field| "my generated message for field '#{field.string_key}'" })
-- ruby

## ValidationError

-- text
my generated message for field 'field'
-- text

-- snippet
   Line | Content
 >    1 | field: value
-- snippet

selection: [0,0] => [0,12]
