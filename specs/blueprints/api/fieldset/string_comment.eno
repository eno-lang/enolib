# Querying an existing, single-line, required string comment from a fieldset

-- input
> comment
fieldset:
entry = value
-- input

-- javascript
const output = enolib.parse(input).fieldset('fieldset').requiredStringComment();
-- javascript

-- php
$output = Eno\Parser::parse($input)->fieldset('fieldset')->requiredStringComment();
-- php

-- python
output = enolib.parse(input).fieldset('fieldset').required_string_comment()
-- python

-- ruby
output = Eno.parse(input).fieldset('fieldset').required_string_comment
-- ruby

## Result

-- string
comment
-- string

# Querying an existing, two-line, required string comment from a fieldset

-- input
>comment
>  comment
fieldset:
entry = value
-- input

-- javascript
const output = enolib.parse(input).fieldset('fieldset').requiredStringComment();
-- javascript

-- php
$output = Eno\Parser::parse($input)->fieldset('fieldset')->requiredStringComment();
-- php

-- python
output = enolib.parse(input).fieldset('fieldset').required_string_comment()
-- python

-- ruby
output = Eno.parse(input).fieldset('fieldset').required_string_comment
-- ruby

## Result

-- string
comment
  comment
-- string

# Querying an existing, required string comment with blank lines from a fieldset

-- input
>
>     comment
>
>   comment
>
> comment
>
fieldset:
entry = value
-- input

-- javascript
const output = enolib.parse(input).fieldset('fieldset').requiredStringComment();
-- javascript

-- php
$output = Eno\Parser::parse($input)->fieldset('fieldset')->requiredStringComment();
-- php

-- python
output = enolib.parse(input).fieldset('fieldset').required_string_comment()
-- python

-- ruby
output = Eno.parse(input).fieldset('fieldset').required_string_comment
-- ruby

## Result

-- string
    comment

  comment

comment
-- string

# Querying an optional, existing string comment from a fieldset

-- input
> comment
fieldset:
entry = value
-- input

-- javascript
const output = enolib.parse(input).fieldset('fieldset').optionalStringComment();
-- javascript

-- php
$output = Eno\Parser::parse($input)->fieldset('fieldset')->optionalStringComment();
-- php

-- python
output = enolib.parse(input).fieldset('fieldset').optional_string_comment()
-- python

-- ruby
output = Eno.parse(input).fieldset('fieldset').optional_string_comment
-- ruby

## Result

-- string
comment
-- string

# Querying an optional, missing string comment from a fieldset

-- input
fieldset:
entry = value
-- input

-- javascript
const output = enolib.parse(input).fieldset('fieldset').optionalStringComment();
-- javascript

-- php
$output = Eno\Parser::parse($input)->fieldset('fieldset')->optionalStringComment();
-- php

-- python
output = enolib.parse(input).fieldset('fieldset').optional_string_comment()
-- python

-- ruby
output = Eno.parse(input).fieldset('fieldset').optional_string_comment
-- ruby

## Nothing
